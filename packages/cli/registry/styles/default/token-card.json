{
  "name": "token-card",
  "shadcnDependencies": ["card", "scroll-area", "skeleton"],
  "files": [
    {
      "name": "token-card.tsx",
      "content": "import { Card, CardContent, CardHeader } from \"@/shadcn-registry/default/ui/card\";\nimport { ScrollArea, ScrollBar } from \"@/shadcn-registry/default/ui/scroll-area\";\nimport { Skeleton } from \"@/shadcn-registry/default/ui/skeleton\";\nimport { erc1155ABI, rewriteUrlIfIFPSUrl, urlPipe, valuePipe } from \"@/libs\"\nimport { useQuery } from \"@tanstack/react-query\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport { erc721Abi, erc20Abi } from \"viem\";\nimport { useReadContract, useReadContracts } from \"wagmi\";\nimport BigNumber from \"bignumber.js\";\n\nexport interface TokenCardProps {\n  type: \"ERC20\" | \"ERC721\" | \"ERC1155\";\n  chainId: number;\n  contract: `0x${string}`;\n  tokenId?: string;\n  wallet?: `0x${string}`;\n  onClick?: () => void;\n}\n\nexport const TokenCard: React.FC<TokenCardProps> = ({\n  type,\n  chainId,\n  contract,\n  tokenId = \"0\",\n  wallet,\n  onClick,\n}) => {\n  const { data: erc20Data } = useReadContracts({\n    contracts: contractsForErc20(chainId, contract, wallet),\n    query: {\n        enabled: type === \"ERC20\",\n    },\n  });\n\n  const { data: erc721TokenURI } = useReadContract({\n    chainId: chainId,\n    address: contract,\n    abi: erc721Abi,\n    functionName: \"tokenURI\",\n    args: [BigInt(tokenId)],\n    query: {\n      enabled: type === \"ERC721\",\n    },\n  });\n\n  const { data: erc721Metadata } = useQuery({\n    queryKey: [\"metadata\", chainId, contract, tokenId],\n    queryFn: async () => {\n      const res = await axios.get(rewriteUrlIfIFPSUrl(erc721TokenURI!));\n      return res.data;\n    },\n    enabled: !!erc721TokenURI,\n  });\n\n  const { data: erc1155TokenURI } = useReadContract({\n    chainId: chainId,\n    address: contract,\n    abi: erc1155ABI,\n    functionName: \"uri\",\n    args: [BigInt(tokenId)],\n    query: {\n      enabled: type === \"ERC1155\",\n    },\n  });\n\n  const { data: erc1155Metadata } = useQuery({\n    queryKey: [\"metadata\", chainId, contract, tokenId],\n    queryFn: async () => {\n      const res = await axios.get(\n        rewriteUrlIfIFPSUrl(erc1155TokenURI as string),\n      );\n      return res.data;\n    },\n    enabled: !!erc1155TokenURI,\n  });\n\n  const metadata = erc721Metadata || erc1155Metadata;\n  const attributes =\n    metadata?.attributes ||\n    Object.entries(erc1155Metadata?.properties || {}).map(([key, value]) => ({\n      trait_type: key,\n      value,\n    }));\n\n  if (!metadata && !erc20Data) {\n    return (\n      <Card>\n        <CardHeader className=\"relative space-y-0 p-0\">\n          <Skeleton className=\"w-full rounded-lg pb-[100%]\" />\n        </CardHeader>\n        <CardContent className=\"p-4\">\n          <div className=\"relative flex w-full items-center space-x-4\">\n            <Skeleton className=\"h-12 w-12 rounded-full\" />\n            <div className=\"space-y-2\">\n              <Skeleton className=\"h-4 w-48\" />\n              <Skeleton className=\"h-4 w-36\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (type === \"ERC20\") {\n    return (\n      <Card>\n        <CardContent className=\"p-4 cursor-pointer\" onClick={onClick}>\n          <div className=\"flex flex-col gap-4\">\n            <div className=\"relative w-full\">\n              <h3 className=\"mb-2 text-lg font-semibold leading-none\">\n                Name\n              </h3>\n              <p className=\"text-muted-foreground text-sm\">\n                {erc20Data?.[0]?.result?.toString()}\n              </p>\n            </div>\n            <div className=\"relative w-full\">\n              <h3 className=\"mb-2 text-lg font-semibold leading-none\">\n                Symbol\n              </h3>\n              <p className=\"text-muted-foreground text-sm\">\n                {erc20Data?.[1]?.result?.toString()}\n              </p>\n            </div>\n            {\n              (!!erc20Data?.[2]?.result && !!erc20Data?.[3]?.result) && (\n                <div className=\"relative w-full\">\n                  <h3 className=\"mb-2 text-lg font-semibold leading-none\">\n                    Balance\n                  </h3>\n                  <p className=\"text-muted-foreground text-sm\">\n                    {\n                        new BigNumber(erc20Data?.[3]?.result.toString())\n                            .dividedBy(new BigNumber(10 ** Number(erc20Data?.[2]?.result)))\n                            .toString()\n                    }\n                  </p>\n                </div>\n              )\n            }\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card>\n      <CardHeader\n        className=\"relative cursor-pointer space-y-0 p-0\"\n        onClick={onClick}\n      >\n        <img\n          className=\"rounded-lg\"\n          src={rewriteUrlIfIFPSUrl(metadata?.image)}\n        />\n      </CardHeader>\n      <CardContent className=\"p-4\">\n        <div className=\"flex flex-col gap-4\">\n          <div className=\"relative w-full\">\n            <h3 className=\"mb-2 text-lg font-semibold leading-none\">\n              Description\n            </h3>\n            <p className=\"text-muted-foreground text-sm\">\n              {metadata?.description}\n            </p>\n          </div>\n          <div className=\"w-full\">\n            <h3 className=\"mb-2 text-lg font-semibold leading-none\">Traits</h3>\n            <ScrollArea className=\"w-full whitespace-nowrap rounded-md border p-2\">\n              <div className=\"flex w-full gap-2\">\n                {attributes?.map(\n                  ({\n                    trait_type,\n                    value,\n                  }: {\n                    trait_type: string;\n                    value: string;\n                  }) => {\n                    return (\n                      <div\n                        key={trait_type}\n                        className=\"bg-primary-100/10 flex w-full flex-col items-center rounded-md border\"\n                      >\n                        <div className=\"font-semibold\">{trait_type}</div>\n                        {value.toString().indexOf(\"https://\") === 0 ? (\n                          <a\n                            href={value}\n                            target=\"_blank\"\n                            className=\"text-primary-500 cursor-pointer underline\"\n                          >\n                            {urlPipe(value)}\n                          </a>\n                        ) : (\n                          <div>{valuePipe(value.toString())}</div>\n                        )}\n                      </div>\n                    );\n                  },\n                )}\n              </div>\n              <ScrollBar orientation=\"horizontal\" />\n            </ScrollArea>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nfunction contractsForErc20(chainId: number, constract: `0x${string}`, walletAddress?: string) {\n  const contractInfo = [\n      {\n          chainId: chainId,\n          address: constract,\n          abi: erc20Abi,\n          functionName: \"name\",\n      },\n      {\n          chainId: chainId,\n          address: constract,\n          abi: erc20Abi,\n          functionName: \"symbol\",\n      },\n      {\n          chainId: chainId,\n          address: constract,\n          abi: erc20Abi,\n          functionName: \"decimals\",\n      },\n  ];\n  const balanceInfo = {\n      chainId: chainId,\n      address: constract,\n      abi: erc20Abi,\n      functionName: \"balanceOf\",\n      args: [walletAddress],\n  };\n\n  return walletAddress ? [...contractInfo, balanceInfo] : contractInfo\n}\n"
    }
  ],
  "type": "components:ui"
}
