{
  "name": "token-card",
  "type": "registry:ui",
  "dependencies": [
    "react",
    "viem",
    "wagmi"
  ],
  "files": [
    {
      "path": "ui/token-card.tsx",
      "content": "\"use client\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { cn } from \"@/registry/default/lib/utils\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport React from \"react\";\nimport { erc20Abi, erc721Abi, formatUnits } from \"viem\";\nimport { useReadContract, useReadContracts } from \"wagmi\";\n\nexport type TokenCardProps =\n  | (ERC20TokenCardProps & { type: \"ERC20\" })\n  | (ERC721TokenCardProps & { type: \"ERC721\" })\n  | (ERC1155TokenCardProps & { type: \"ERC1155\" });\n\nexport const TokenCard: React.FC<TokenCardProps> = (props) => {\n  switch (props.type) {\n    case \"ERC20\":\n      return <ERC20TokenCard {...props} />;\n    case \"ERC721\":\n      return <ERC721TokenCard {...props} />;\n    case \"ERC1155\":\n      return <ERC1155TokenCard {...props} />;\n    default:\n      return null;\n  }\n};\n\nfunction TokenCardSkeleton(props: { className?: string }) {\n  return (\n    <Card className={props.className}>\n      <CardHeader className=\"relative space-y-0 p-0\">\n        <Skeleton className=\"w-full rounded-lg pb-[100%]\" />\n      </CardHeader>\n      <CardContent className=\"p-4\">\n        <div className=\"relative flex w-full items-center space-x-4\">\n          <Skeleton className=\"h-12 w-12 rounded-full\" />\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-4 w-48\" />\n            <Skeleton className=\"h-4 w-36\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction NFTCardSkeleton(props: { className?: string }) {\n  return (\n    <Card className={cn(\"w-[350px] overflow-hidden\", props.className)}>\n      <CardHeader className=\"p-0\">\n        <Skeleton className=\"w-full h-[200px]\" />\n      </CardHeader>\n      <CardContent className=\"p-4\">\n        <Skeleton className=\"h-8 w-3/4 mb-2\" />\n        <Skeleton className=\"h-4 w-full mb-4\" />\n        <div className=\"grid grid-cols-2 gap-x-4 gap-y-2\">\n          {[...Array(3)].map((_, index) => (\n            <div key={index} className=\"flex flex-col\">\n              <Skeleton className=\"h-4 w-20 mb-1\" />\n              <Skeleton className=\"h-5 w-28\" />\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\ntype ERC20TokenCardProps = {\n  chainId: number;\n  contract: `0x${string}`;\n  wallet: `0x${string}`;\n  onClick?: () => void;\n  className?: string;\n};\nfunction ERC20TokenCard(props: ERC20TokenCardProps) {\n  const { chainId, contract, wallet } = props;\n  const { data } = useERC20Balance({ chainId, contract, wallet });\n\n  if (!data) {\n    return <TokenCardSkeleton className={props.className} />;\n  }\n\n  const [name, symbol, decimals, balance] = data;\n\n  return (\n    <Card className={props.className}>\n      <CardContent className=\"p-4\" onClick={props.onClick}>\n        <div className=\"flex flex-col gap-4\">\n          <div className=\"relative w-full\">\n            <h3 className=\"mb-2 text-lg font-semibold leading-none\">Name</h3>\n            <p className=\"text-muted-foreground text-sm\">{name}</p>\n          </div>\n\n          <div className=\"relative w-full\">\n            <h3 className=\"mb-2 text-lg font-semibold leading-none\">Symbol</h3>\n            <p className=\"text-muted-foreground text-sm\">{symbol}</p>\n          </div>\n\n          <div className=\"relative w-full\">\n            <h3 className=\"mb-2 text-lg font-semibold leading-none\">Balance</h3>\n            <p className=\"text-muted-foreground text-sm\">\n              {formatUnits(balance, decimals)}\n            </p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface ERC721TokenCardProps {\n  chainId: number;\n  contract: `0x${string}`;\n  tokenId: string;\n  onClick?: () => void;\n  className?: string;\n}\nfunction ERC721TokenCard({\n  chainId,\n  contract,\n  tokenId,\n  ...props\n}: ERC721TokenCardProps) {\n  const { data } = useReadContracts({\n    allowFailure: false,\n    contracts: [\n      {\n        chainId,\n        address: contract,\n        abi: erc721Abi,\n        functionName: \"tokenURI\",\n        args: [BigInt(tokenId)],\n      },\n      {\n        chainId,\n        address: contract,\n        abi: erc721Abi,\n        functionName: \"name\",\n      },\n    ],\n  });\n\n  const [erc721TokenURI, name] = data || [];\n\n  const { data: erc721Metadata } = useQuery({\n    queryKey: [\"metadata\", chainId, contract, tokenId],\n    queryFn: async () => {\n      const response = await fetch(rewriteUrlIfIpfsUrl(erc721TokenURI!));\n      if (!response.ok) {\n        throw new Error(\"Network error\");\n      }\n      return response.json();\n    },\n    enabled: !!erc721TokenURI,\n  });\n\n  const metadata = erc721Metadata;\n  const attributes = metadata?.attributes;\n\n  if (!metadata) {\n    return <NFTCardSkeleton className={props.className} />;\n  }\n\n  return (\n    <TokenMetadataDisplay\n      title={name || \"\"}\n      metadata={metadata}\n      attributes={attributes}\n      {...props}\n    />\n  );\n}\n\ninterface ERC1155TokenCardProps {\n  chainId: number;\n  contract: `0x${string}`;\n  tokenId: string;\n  onClick?: () => void;\n  className?: string;\n}\nexport const ERC1155TokenCard = ({\n  chainId,\n  contract,\n  tokenId,\n  ...props\n}: ERC1155TokenCardProps) => {\n  const { data: erc1155TokenURI } = useReadContract({\n    chainId: chainId,\n    address: contract,\n    abi: [\n      {\n        inputs: [{ internalType: \"uint256\", name: \"id\", type: \"uint256\" }],\n        name: \"uri\",\n        outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n      },\n    ],\n    functionName: \"uri\",\n    args: [BigInt(tokenId)],\n  });\n\n  const { data: metadata } = useQuery({\n    queryKey: [\"metadata\", chainId, contract, tokenId],\n    queryFn: async () => {\n      const response = await fetch(\n        rewriteUrlIfIpfsUrl(erc1155TokenURI as string),\n      );\n      if (!response.ok) {\n        throw new Error(\"Network error\");\n      }\n      return (await response.json()) as {\n        name: string;\n        decimals: string;\n        description: string;\n        image: string;\n        properties: { [key: string]: string };\n      };\n    },\n    enabled: !!erc1155TokenURI,\n  });\n\n  const attributes = Object.entries(metadata?.properties || {}).map(\n    ([key, value]) => ({ trait_type: key, value }),\n  );\n\n  if (!metadata) {\n    return <NFTCardSkeleton />;\n  }\n\n  return (\n    <TokenMetadataDisplay\n      title={metadata?.name}\n      metadata={metadata}\n      attributes={attributes}\n      {...props}\n    />\n  );\n};\n\ninterface TokenMetadataDisplayProps {\n  title: string;\n  metadata: { image: string; description?: string };\n  attributes?: Array<{ trait_type: string; value: string }>;\n  className?: string;\n}\n\nexport const TokenMetadataDisplay = ({\n  title,\n  metadata,\n  attributes,\n  className,\n}: TokenMetadataDisplayProps) => {\n  return (\n    <Card className={cn(\"w-[350px] overflow-hidden\", className)}>\n      <CardHeader className=\"p-0\">\n        <img\n          alt=\"NFT\"\n          className=\"w-full object-cover\"\n          src={rewriteUrlIfIpfsUrl(metadata?.image)}\n        />\n      </CardHeader>\n      <CardContent className=\"p-4\">\n        <CardTitle className=\"text-2xl font-bold\">{title}</CardTitle>\n        <p className=\"text-sm text-muted-foreground mt-2\">\n          {metadata?.description}\n        </p>\n\n        <dl className=\"grid grid-cols-2 gap-x-4 gap-y-2 mt-4 text-sm\">\n          {attributes?.map((item) => (\n            <div key={item.trait_type} className=\"flex flex-col\">\n              <dt className=\"font-medium text-muted-foreground\">\n                {item.trait_type}\n              </dt>\n              <dd className=\"font-semibold\">\n                {item.value.toString().indexOf(\"https://\") === 0 ? (\n                  <a\n                    href={item.value}\n                    target=\"_blank\"\n                    className=\"text-primary-500 cursor-pointer underline\"\n                  >\n                    {shortenUrl(item.value)}\n                  </a>\n                ) : (\n                  <div>{formatValueOrAddress(item.value.toString())}</div>\n                )}\n              </dd>\n            </div>\n          ))}\n        </dl>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst formatAddress = (\n  address: `0x${string}`,\n  prefixLength = 6,\n  suffixLength = 4,\n): string => {\n  return `${address.slice(0, prefixLength)}...${address.slice(-suffixLength)}`;\n};\n\nconst formatValueOrAddress = (value: string): string => {\n  return value.startsWith(\"0x\") ? formatAddress(value as `0x${string}`) : value;\n};\n\nfunction shortenUrl(url: string) {\n  return `${url.slice(0, 10)}...${url.slice(-4)}`;\n}\n\nfunction rewriteUrlIfIpfsUrl(url: string) {\n  if (url.toLowerCase().startsWith(\"https://ipfs.io/ipfs\")) {\n    return url.replace(\n      \"https://ipfs.io/ipfs\",\n      \"https://gateway.pinata.cloud/ipfs\",\n    );\n  } else if (url.toLowerCase().startsWith(\"ipfs://ipfs\")) {\n    return url.replace(\"ipfs://ipfs\", \"https://gateway.pinata.cloud/ipfs\");\n  } else if (url.toLowerCase().startsWith(\"ipfs://\")) {\n    return url.replace(\"ipfs://\", \"https://gateway.pinata.cloud/ipfs/\");\n  }\n  return url;\n}\n\nfunction useERC20Balance({\n  chainId,\n  contract,\n  wallet,\n}: {\n  chainId: number;\n  contract: `0x${string}`;\n  wallet: `0x${string}`;\n}) {\n  return useReadContracts({\n    allowFailure: false,\n    contracts: [\n      {\n        chainId: chainId,\n        address: contract,\n        abi: erc20Abi,\n        functionName: \"name\",\n      },\n      {\n        chainId: chainId,\n        address: contract,\n        abi: erc20Abi,\n        functionName: \"symbol\",\n      },\n      {\n        chainId: chainId,\n        address: contract,\n        abi: erc20Abi,\n        functionName: \"decimals\",\n      },\n      {\n        chainId: chainId,\n        address: contract,\n        abi: erc20Abi,\n        functionName: \"balanceOf\",\n        args: [wallet],\n      },\n    ],\n  });\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}