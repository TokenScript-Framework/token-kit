{
  "name": "tapp-card",
  "type": "registry:ui",
  "dependencies": [
    "wagmi"
  ],
  "shadcnDependencies": [
    "card",
    "skeleton"
  ],
  "files": [
    {
      "path": "ui/tapp-card.tsx",
      "content": "\"use client\";\nimport React, { useRef, useState, RefObject, useEffect } from \"react\";\nimport { useWalletClient } from \"wagmi\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { cn } from \"@/registry/default/lib/utils\";\n\nexport function TappCardSkeleton(props: { className?: string }) {\n  return (\n    <Card className={cn(\"w-[350px] overflow-hidden\", props.className)}>\n      <CardHeader className=\"p-0\">\n        <Skeleton className=\"w-full h-[200px]\" />\n      </CardHeader>\n      <CardContent className=\"p-4\">\n        <Skeleton className=\"h-8 w-3/4 mb-2\" />\n        <Skeleton className=\"h-4 w-full mb-4\" />\n        <div className=\"grid grid-cols-2 gap-x-4 gap-y-2\">\n          {[...Array(3)].map((_, index) => (\n            <div key={index} className=\"flex flex-col\">\n              <Skeleton className=\"h-4 w-20 mb-1\" />\n              <Skeleton className=\"h-5 w-28\" />\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface TappCardProps {\n  chainId: number;\n  contract: `0x${string}`;\n  tokenId: string;\n  cssClass?: string;\n}\nexport default function TappCard({\n  chainId,\n  contract,\n  tokenId,\n  cssClass,\n}: TappCardProps) {\n  const url = `https://viewer-staging.tokenscript.org/?viewType=sts-token&chain=${chainId}&contract=${contract}&tokenId=${tokenId}`;\n\n  const iframeRef = useRef<HTMLIFrameElement>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  useIframePostMessage(iframeRef, url);\n\n  const handleIframeLoad = () => {\n    setIsLoaded(true);\n  };\n\n  return (\n    <>\n      {!isLoaded && <TappCardSkeleton />}\n      <iframe\n        ref={iframeRef}\n        src={url}\n        className={cn(\n          \"mx-auto h-[650px] max-w-[500px] w-full iframe-placeholder\",\n          cssClass,\n        )}\n        onLoad={handleIframeLoad}\n      ></iframe>\n    </>\n  );\n}\n\nexport const useIframePostMessage = (\n  iframeRef: RefObject<HTMLIFrameElement>,\n  targetOrigin: string,\n) => {\n  const { data: walletClient } = useWalletClient();\n\n  useEffect(() => {\n    function sendResponse(\n      messageData: MessageEvent[\"data\"],\n      response: unknown,\n      error?: unknown,\n    ) {\n      const data = messageData;\n\n      if (error) {\n        data.error = error;\n      } else {\n        data.result = response;\n      }\n\n      iframeRef.current?.contentWindow?.postMessage(data, \"*\");\n    }\n\n    const handleMessage = async (event: MessageEvent) => {\n      if (!walletClient) {\n        return;\n      }\n\n      if (!event.data.method) {\n        return;\n      }\n\n      try {\n        switch (event.data.method) {\n          case \"eth_accounts\":\n          case \"eth_requestAccounts\": {\n            const data = await walletClient.request({\n              method: event.data.method,\n            });\n            sendResponse(event.data, data);\n            break;\n          }\n          case \"eth_getCode\":\n          case \"eth_chainId\":\n          case \"net_version\":\n          case \"eth_blockNumber\":\n          case \"eth_estimateGas\":\n          case \"eth_sendTransaction\":\n          case \"eth_getTransactionByHash\":\n          case \"eth_getTransactionReceipt\":\n          case \"eth_getTransactionCount\":\n          case \"personal_sign\":\n          case \"eth_call\":\n          case \"eth_signTypedData\":\n          case \"eth_signTypedData_v4\":\n          case \"eth_getBlockByNumber\":\n          case \"wallet_switchEthereumChain\": {\n            const data = await walletClient.request({\n              method: event.data.method,\n              params: event.data.params,\n            });\n            sendResponse(event.data, data);\n            break;\n          }\n\n          default:\n            sendResponse(event.data, null, {\n              code: -1,\n              message:\n                \"RPC Method \" + event.data.method + \" is not implemented\",\n            });\n            break;\n        }\n      } catch (e: unknown) {\n        const error = e as CustomError;\n\n        sendResponse(event.data, null, {\n          code: error.data?.code ?? error.code,\n          message:\n            error.message +\n            (error.data?.message ? \" \" + error.data?.message : \"\"),\n        });\n      }\n    };\n\n    window.addEventListener(\"message\", handleMessage);\n\n    return () => window.removeEventListener(\"message\", handleMessage);\n  }, [iframeRef, targetOrigin, walletClient]);\n};\n\ninterface CustomError extends Error {\n  data?: { code?: number; message?: string };\n  code?: number;\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}