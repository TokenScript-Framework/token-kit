{
  "name": "add-to-snap",
  "type": "registry:ui",
  "dependencies": [
    "view"
  ],
  "shadcnDependencies": [],
  "files": [
    {
      "path": "ui/add-to-snap.tsx",
      "content": "import React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { baseSepolia, mainnet, sepolia } from \"viem/chains\";\nimport { tokenData } from \"@token-kit/onchain\";\nimport { createPublicClient, http, PublicClient } from \"viem\";\nimport { cn } from \"@/lib/utils\";\n\ntype ADDRESSTYPE = `0x${string}`;\n\ntype TokenMetadata = {\n  image?: string;\n  attributes: {\n    trait_type: string;\n    value: string | number;\n  }[];\n  description: string;\n  name: string;\n  animation_url?: string;\n};\n\ntype Token = {\n  chain: string;\n  contract: ADDRESSTYPE;\n  tokenId?: string;\n  actions: string[];\n  name: string;\n  description: string;\n  aboutUrl: string;\n  tokenMetadata: TokenMetadata;\n};\ntype TokenType = {\n  type: string;\n  subTypes?: string[];\n  scriptURI?: string[];\n};\n\ninterface ERC20TokenData {\n  type: TokenType;\n  name: string;\n  symbol: string;\n  decimals: number;\n  totalSupply: number;\n}\ninterface ERC721TokenData {\n  type: TokenType;\n  owner: `0x${string}`;\n  tokenURI: string;\n  tokenMetadata?: unknown;\n  contractMetadata?: unknown;\n}\ninterface ERC1155TokenData {\n  type: TokenType;\n  uri: string;\n  tokenMetadata?: unknown;\n  contractMetadata?: unknown;\n}\n\nconst SpinIcon = ({ className }: { className?: string }) => (\n  <svg\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n  >\n    <circle\n      className=\"opacity-25\"\n      cx=\"12\"\n      cy=\"12\"\n      r=\"10\"\n      stroke=\"currentColor\"\n      strokeWidth=\"4\"\n    ></circle>\n    <path\n      className=\"opacity-75\"\n      fill=\"currentColor\"\n      d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n    ></path>\n  </svg>\n);\n\nconst DEFAULT_CSS =\n  \"flex justify-center min-w-32 max-w-40 bg-blue-500 hover:bg-blue-700 text-white py-2 px-4 rounded focus:outline-none focus:shadow-outline disabled:opacity-50 \";\n\nconst TAPP_SNAP_ID =\n  process.env.NEXT_PUBLIC_TAPP_SNAP_ID || \"npm:@token-kit/tapp-snap\";\n\nconst SNAP_METHOD = \"import\";\n\ninterface AddToSnapProps {\n  chain: string;\n  contract: ADDRESSTYPE;\n  tokenId?: string;\n  title?: string;\n  cssClass?: string;\n  onSuccess?: (result: unknown) => void;\n  onError?: (error: Error) => void;\n}\n\nexport default function AddToSnap({\n  chain,\n  contract,\n  tokenId,\n  title,\n  cssClass,\n  onSuccess,\n  onError,\n}: AddToSnapProps) {\n  const { isMetaMaskInstalled, isSnapInstalled } =\n    useMetaMaskStatus(TAPP_SNAP_ID);\n  const [metadata, setMetadata] = useState<Token>({} as Token);\n\n  useEffect(() => {\n    const fetchMetadata = async () => {\n      if (isMetaMaskInstalled && isSnapInstalled) {\n        setMetadata(await getMetadata(chain, contract, tokenId));\n      }\n    };\n    fetchMetadata();\n  }, [\n    chain,\n    contract,\n    isMetaMaskInstalled,\n    isSnapInstalled,\n    setMetadata,\n    tokenId,\n  ]);\n\n  const handleSnapInstalled = useCallback(async () => {\n    if (chain && contract) {\n      const tokenData = await getMetadata(chain, contract, tokenId);\n      setMetadata(tokenData);\n    }\n  }, [chain, contract, tokenId]);\n\n  return (\n    <MetaMaskSnapButton\n      snapId={TAPP_SNAP_ID}\n      snapMethod={SNAP_METHOD}\n      snapParams={metadata}\n      title={title}\n      cssClass={cssClass}\n      onSnapInstalled={handleSnapInstalled}\n      onSuccess={onSuccess}\n      onError={onError}\n    />\n  );\n}\n\nfunction getChain(chainId: number) {\n  switch (chainId) {\n    case 11155111:\n      return sepolia;\n    case 84532:\n      return baseSepolia;\n    default:\n      return mainnet;\n  }\n}\n\nenum ChainId {\n  MAINNET = 1,\n  SEPOLIA = 11155111,\n  BASE_SEPOLIA = 84532,\n}\n\ninterface NetworkInfo {\n  rpcUrl: string;\n  explorerUrl: string;\n}\n\nconst NETWORK_INFO: Record<ChainId, NetworkInfo> = {\n  [ChainId.MAINNET]: {\n    rpcUrl: \"https://rpc.payload.de\",\n    explorerUrl: \"https://etherscan.io/\",\n  },\n  [ChainId.SEPOLIA]: {\n    rpcUrl: \"https://ethereum-sepolia-rpc.publicnode.com\",\n    explorerUrl: \"https://sepolia.etherscan.io/\",\n  },\n  [ChainId.BASE_SEPOLIA]: {\n    rpcUrl: \"https://sepolia.base.org\",\n    explorerUrl: \"https://sepolia.basescan.org/\",\n  },\n};\n\nfunction getRPCURL(chainId: ChainId): string {\n  return NETWORK_INFO[chainId].rpcUrl;\n}\n\nasync function getMetadata(\n  chain: string,\n  contract: ADDRESSTYPE,\n  tokenId?: string,\n): Promise<Token> {\n  const chainId = Number(chain);\n  const client = createPublicClient({\n    chain: getChain(chainId),\n    transport: http(getRPCURL(chainId)),\n  }) as PublicClient;\n\n  const result = await tokenData(\n    client,\n    contract,\n    tokenId ? Number(tokenId) : undefined,\n    {\n      includeTokenMetadata: true,\n      includeContractMetadata: true,\n    },\n  );\n\n  const { name, description, aboutUrl, tokenMetadata } = normalizeTokenData(\n    result,\n    contract,\n  );\n\n  return {\n    chain,\n    contract,\n    tokenId,\n    name,\n    description,\n    aboutUrl,\n    actions: [\"Action\"],\n    tokenMetadata: tokenMetadata as TokenMetadata,\n  };\n}\n\nfunction normalizeTokenData(\n  result: ERC20TokenData | ERC721TokenData | ERC1155TokenData,\n  contract: ADDRESSTYPE,\n) {\n  let contractMetadata = {\n    name: \"\",\n    description: \"\",\n    external_link: \"\",\n    image: \"\",\n  };\n\n  if (\"contractMetadata\" in result) {\n    contractMetadata = {\n      name: (result.contractMetadata as { name?: string })?.name ?? \"\",\n      description:\n        (result.contractMetadata as { description?: string })?.description ??\n        \"\",\n      external_link:\n        (result.contractMetadata as { external_link?: string })\n          ?.external_link ?? \"\",\n      image: (result.contractMetadata as { image?: string })?.image ?? \"\",\n    };\n  }\n\n  const symbol = \"symbol\" in result ? result.symbol : \"\";\n  const name = \"name\" in result ? result.name : \"\";\n  const tokenMetadata =\n    \"tokenMetadata\" in result ? result.tokenMetadata : undefined;\n\n  return {\n    name: contractMetadata.name || symbol,\n    description: contractMetadata.description || name,\n    aboutUrl: contractMetadata.external_link,\n    tokenMetadata: tokenMetadata || {\n      description: symbol || null,\n      address: contract,\n      name: name || null,\n      attributes: [],\n    },\n  };\n}\n\nexport const useMetaMaskStatus = (snapId: string) => {\n  const [isMetaMaskInstalled, setIsMetaMaskInstalled] = useState(false);\n  const [isSnapInstalled, setIsSnapInstalled] = useState(false);\n\n  const checkSnapInstallation = useCallback(async () => {\n    try {\n      const snaps = (await window.ethereum.request({\n        method: \"wallet_getSnaps\",\n      })) as Record<string, unknown>;\n      return snaps && !!snaps[snapId];\n    } catch (error) {\n      console.error(\"Error checking snap installation:\", error);\n      return false;\n    }\n  }, [snapId]);\n\n  const refreshSnapStatus = useCallback(async () => {\n    const snapInstalled = await checkSnapInstallation();\n    setIsSnapInstalled(snapInstalled);\n  }, [checkSnapInstallation]);\n\n  useEffect(() => {\n    const checkMetaMaskStatus = async () => {\n      const isInstalled =\n        typeof window.ethereum !== \"undefined\" && window.ethereum.isMetaMask;\n      setIsMetaMaskInstalled(isInstalled);\n      await refreshSnapStatus();\n    };\n\n    checkMetaMaskStatus();\n  }, [snapId]);\n\n  return { isMetaMaskInstalled, isSnapInstalled, refreshSnapStatus };\n};\n\ninterface MetaMaskSnapButtonProps {\n  snapId: string;\n  snapMethod: string;\n  snapParams: unknown;\n  title?: string;\n  cssClass?: string;\n  onSnapInstalled?: () => Promise<void>;\n  onSuccess?: (result: unknown) => void;\n  onError?: (error: Error) => void;\n}\nexport const MetaMaskSnapButton: React.FC<MetaMaskSnapButtonProps> = ({\n  snapId,\n  snapMethod,\n  snapParams,\n  title = \"Import Token\",\n  cssClass = DEFAULT_CSS,\n  onSnapInstalled,\n  onSuccess,\n  onError,\n}) => {\n  const { isMetaMaskInstalled, isSnapInstalled, refreshSnapStatus } =\n    useMetaMaskStatus(snapId);\n  const [isLoading, setIsLoading] = useState(false);\n  const snapParamsRef = useRef(snapParams);\n\n  const installSnap = useCallback(async () => {\n    try {\n      await window.ethereum.request({\n        method: \"wallet_requestSnaps\",\n        params: { [snapId]: {} },\n      });\n      return true;\n    } catch (error) {\n      console.error(\"Error installing snap:\", error);\n      onError?.(\n        error instanceof Error ? error : new Error(\"Failed to install snap\"),\n      );\n      return false;\n    }\n  }, [snapId, onError]);\n\n  const invokeSnap = useCallback(async () => {\n    try {\n      const result = await window.ethereum.request({\n        method: \"wallet_invokeSnap\",\n        params: {\n          snapId,\n          request: { method: snapMethod, params: snapParamsRef.current },\n        },\n      });\n      onSuccess?.(result);\n    } catch (error) {\n      console.error(\"Error invoking snap:\", error);\n      onError?.(\n        error instanceof Error ? error : new Error(\"Failed to invoke snap\"),\n      );\n    }\n  }, [snapId, snapMethod, onSuccess, onError]);\n\n  useEffect(() => {\n    snapParamsRef.current = snapParams;\n  }, [snapParams]);\n\n  const handleClick = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      if (!isMetaMaskInstalled) {\n        window.open(\"https://metamask.io/download/\", \"_blank\");\n      } else {\n        if (!isSnapInstalled) {\n          const installed = await installSnap();\n          if (installed) {\n            await refreshSnapStatus(); // 刷新 Snap 安装状态\n            if (onSnapInstalled) {\n              await onSnapInstalled();\n              await new Promise((resolve) => setTimeout(resolve, 500));\n            }\n          }\n        }\n\n        await invokeSnap();\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      onError?.(\n        error instanceof Error ? error : new Error(\"Unknown error occurred\"),\n      );\n    } finally {\n      setIsLoading(false);\n    }\n  }, [\n    isMetaMaskInstalled,\n    isSnapInstalled,\n    invokeSnap,\n    installSnap,\n    refreshSnapStatus,\n    onSnapInstalled,\n    onError,\n  ]);\n\n  let buttonText = title;\n  if (!isMetaMaskInstalled) {\n    buttonText = \"Install MetaMask\";\n  } else if (isSnapInstalled) {\n    buttonText = title;\n  }\n  return (\n    <button\n      onClick={handleClick}\n      disabled={isLoading}\n      className={cn(DEFAULT_CSS, cssClass)}\n    >\n      {isLoading ? (\n        <>\n          <SpinIcon className=\"h-5 w-5 animate-spin text-white\" />\n        </>\n      ) : (\n        buttonText\n      )}\n    </button>\n  );\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}